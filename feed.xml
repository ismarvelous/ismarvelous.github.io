<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Codevelo.us</title>
  <subtitle>Beautiful code and other things we like</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="http://ismarvelous.nl/"/>
  <updated>2017-05-09T14:30:47.930Z</updated>
  <id>http://ismarvelous.nl/</id>
  
  <author>
    <name>Jeroen Wijdeven</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Sneak peek; What bigdata can do for your CMS</title>
    <link href="http://ismarvelous.nl/posts/Sneak%20peek%20what%20bigdata%20can%20do%20for%20your%20CMS/"/>
    <id>http://ismarvelous.nl/posts/Sneak peek what bigdata can do for your CMS/</id>
    <published>2017-05-08T22:00:00.000Z</published>
    <updated>2017-05-09T14:30:47.930Z</updated>
    
    <content type="html"><![CDATA[<p>The combination of big data / analytics and all the nice things that we can do with it in our CMS systems has keeping me busy the last 2 years. The result is our own CMS independend bigdata platform where we can combine analytics, personalisation, testing and connecting other datasources like (CRM, ERP etc.) In this blog post I want you to give a little sneak peek of what we did.</p>
<p>Let start with some explanations of the techniques we use</p>
<h2 id="Dimml-the-data-sience-language"><a href="#Dimml-the-data-sience-language" class="headerlink" title="Dimml the data sience language"></a>Dimml the data sience language</h2><p>Dimml is a declaritive machine language. That’s a mouth full of technical words. We call it our data washing machine. It collects all kind of data from different sources and does make an easy understandable data source from all of that. That “washed” data is used in our .net applications. It’s not only analytics data that matters, it’s about data which you can collect from other systems as well. Filter and combine it, and to make usefull information of it. The beauty of dimml is; it is realtime, you don’t have to wait a day or 2 before all data is processed and it can connect a lot of sources. An example; collect live visitor data of your website, connect it with  data of your CRM, your email campaign or even the visitors who visted you “offline” store.</p>
<h2 id="Einstakur-codename"><a href="#Einstakur-codename" class="headerlink" title="Einstakur (codename)"></a>Einstakur (codename)</h2><p>What?? Einstakur is that some weird iceland word!? Yes it is! It’s because we didn’t find a word to describe what we are working. Iceland is probably one of the smallest languages in the world, so not that much of native speakers can blame us for using the word the wrong way ;-) .. So what’s Einstakur in this case? It’s a code name for our .net library which we created on top of the mongo db. Einstakur is CMS / application independend and can be used in Umbraco, Episerver our even your (mobile) .net applications. You can not only use it for quering the visitor / analytics data, but also to push log entries or server performance statistics to dimml. Imagine what you can do when you connect those data pieces.</p>
<h2 id="Visitor-groups-and-Pipeline"><a href="#Visitor-groups-and-Pipeline" class="headerlink" title="Visitor groups and Pipeline"></a>Visitor groups and Pipeline</h2><p>Episerver has already something inplace to personalize the experience of your site visitors. It’s called visitor groups. The standard available Visitor groups are most of the time session based. In another article we already talked about how to create cross session based criteria. Our new solution goes a step further but does use the same techniques in Episerver. The Episerver platform has some nice interfaces on top of which you can easily create your own visitor group criteria.<br>Umbraco on the other hand is the editors most friendly CMS system. It does focus on managing content (duh! it’s a content management system) and does a great job there. Umbraco in it’s core doesn’t have something like visitor groups but there are plenty of packages who do. One of them is called Pipeline, a mini CRM inside Umbraco. Pipeline is created by our friends from GrowCreate and we are closely working together with them to create a superduper of a personalisation experience for Umbraco as well. In pipeline the “groups” are called “segments”.</p>
<h2 id="Connecting-the-pieces"><a href="#Connecting-the-pieces" class="headerlink" title="Connecting the pieces"></a>Connecting the pieces</h2><p>Imagine that you not only track visitor analytics data, but you can connect and combine other sources as well to know your customer even better. It can be scary and you have to think more than twice about privacy. Not only what is accepted by law, but also what do you think is acceptable (but lets keep that for another big blog post). In the image below you see that visitor tracking is just one of the data sources. Via Dimml we can collect all page visits and javascript events (mouseovers, clicks, scrolls etc) of a user and store them into one big mongo db. Einstakur on the other hand is our first step of an api to use the data. It’s a query api which you can use to create superduper nice visitor group criteria (Episerver) or segments (Pipeline). We also use it to have integrated analytics in the CMS. For example live analytics on page and or visitor level.</p>
<p><img src="/assets/posts/20170509-1.png" alt="Connecting the pieces"></p>
<h2 id="I-want-this"><a href="#I-want-this" class="headerlink" title="I want this!"></a>I want this!</h2><p>Oh yeah, you like this? Nice! please contact us at: <a href="&quot;mailto:mail@marvelous.nl&quot;">Marvelous.nl</a>. We really like to work together and give you the oppertunity to play around with it.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The combination of big data / analytics and all the nice things that we can do with it in our CMS systems has keeping me busy the last 2 
    
    </summary>
    
    
      <category term="Episerver" scheme="http://ismarvelous.nl/tags/Episerver/"/>
    
      <category term="Umbraco" scheme="http://ismarvelous.nl/tags/Umbraco/"/>
    
      <category term="Dimml" scheme="http://ismarvelous.nl/tags/Dimml/"/>
    
      <category term="Einstakur" scheme="http://ismarvelous.nl/tags/Einstakur/"/>
    
  </entry>
  
  <entry>
    <title>Cross session personalisation with EPiServer</title>
    <link href="http://ismarvelous.nl/posts/cross%20session%20personalisation%20with%20episerver/"/>
    <id>http://ismarvelous.nl/posts/cross session personalisation with episerver/</id>
    <published>2015-11-17T23:00:00.000Z</published>
    <updated>2016-08-14T11:30:35.574Z</updated>
    
    <content type="html"><![CDATA[<p>With the standard visitor group criteria cross session personalisation is not standard.<br>However when a user already has visited your website you know him or her from a previous visit and don’t want to discover who he or she<br>is the second time, you only like to know him better. In the real world the customer don’t need to introduce him self the second time.<br>We like to reach the same goal with the visitors on our website.</p>
<h2 id="Session-based"><a href="#Session-based" class="headerlink" title="Session based"></a>Session based</h2><p>The standard visitor criteria for “Viewed pages” is session based. In this article we are going to make this a cross session<br>experience. We are going to create an experience where we base personlisation based on the last / previous visits.<br>This is farely easy to do in EpiServer by turing the standard criterion into a cross session equivalent.</p>
<h2 id="Cross-session-criteria"><a href="#Cross-session-criteria" class="headerlink" title="Cross session criteria"></a>Cross session criteria</h2><p>Visitorgroups are based on <a href="http://world.episerver.com/documentation/Items/Developers-Guide/EPiServer-CMS/9/Personalization/Personalization/#CustomVisitorGroupCriteria" target="_blank" rel="external">criterion</a>. To introduce cross session behaviour we created a XCriterionBase class. This class saves an “Anonymous”UserId into a cookie.<br>When the user turns back the next time, we know this user from previous visits, based on this UserId. Each cross session criteria<br>we are going to make relies on this base class XCriterionBase. Let’s explain the code step by step.</p>
<h3 id="1-Handle-the-start-of-each-session"><a href="#1-Handle-the-start-of-each-session" class="headerlink" title="1. Handle the start of each session"></a>1. Handle the start of each session</h3><p>Handle the start of each session and make sure you get an already existing cookie value, or to create a new one, when it doesn’t<br>already exist. When it doesn’t exist we write a new Guid to it, which will be used for this user, until it expire.<br>note: The GetCookie function can be used for saving other cookie related information as well.</p>
<pre><code>public override void Subscribe(ICriterionEvents criterionEvents)
{
    criterionEvents.StartSession += Handle_StartSession;
}

private static void Handle_StartSession(object sender, CriterionEventArgs e)
{
    //Set the cookie but do not override the existing value.
    GetCookie(e.HttpContext, AnonymousUserCookieKey, Guid.NewGuid().ToString(), false);
}

protected static HttpCookie GetCookie(HttpContextBase httpContext, string cookieName, string cookieValue=null, bool overrideExistingValue=false)
{
    var cookie = httpContext.Request.Cookies[cookieName];

    if (cookie == null)
    {
        cookie = new HttpCookie(cookieName)
        {
            Value = cookieValue,
            Expires = CookieExpires
        };
        httpContext.Response.Cookies.Add(cookie);
        httpContext.Request.Cookies.Add(cookie);
    }
    else //update exsiting
    {
        if(overrideExistingValue) cookie.Value = cookieValue;
        cookie.Expires = CookieExpires;
        httpContext.Response.Cookies.Add(cookie);
        httpContext.Request.Cookies.Set(cookie);
    }

    return cookie;
}
</code></pre><h3 id="2-Identify-the-user"><a href="#2-Identify-the-user" class="headerlink" title="2. Identify the user"></a>2. Identify the user</h3><p>By using the AnonymousUserId property you can get all user information any time you want.</p>
<pre><code>protected Guid AnonymousUserId
{
    get
    {
        return Guid.Parse(GetCookie(new HttpContextWrapper(HttpContext.Current), AnonymousUserCookieKey, Guid.NewGuid().ToString(), false).Value);
    }
}
</code></pre><h3 id="3-Unsubscribe"><a href="#3-Unsubscribe" class="headerlink" title="3. Unsubscribe"></a>3. Unsubscribe</h3><p>Don’t forget to unsubscribe the session start.</p>
<pre><code>public override void Unsubscribe(ICriterionEvents criterionEvents)
{
    criterionEvents.StartSession -= Handle_StartSession;
}
</code></pre><h2 id="Data-repository"><a href="#Data-repository" class="headerlink" title="Data repository."></a>Data repository.</h2><p>Data for the “Anonymous”User is saved into a database using a repository. This allows you to save this stuff into a custom<br>“Experience” database or just use the database you already use for the EPiServer CMS, it’s up to you.</p>
<h3 id="1-The-repository"><a href="#1-The-repository" class="headerlink" title="1. The repository"></a>1. The repository</h3><p>The repository is based on an interface. We can create custom implementations based on it.</p>
<pre><code>public interface IXCriterionRepository
{
    XCriterionModel GetXCriterion(Guid userId, string key);
    void UpdateXCriterion(XCriterionModel criterion);
    void Clean(int expirationDays);
}
</code></pre><h3 id="2-Register-the-implementation"><a href="#2-Register-the-implementation" class="headerlink" title="2. Register the implementation"></a>2. Register the implementation</h3><p>Be sure you register the implementation of you repository at startup. This can be done with an attribute or by adding it to the<br>container at startup in a InitializationModule.</p>
<pre><code>x.For&lt;IXCriterionRepository&gt;().Use&lt;XCriterionRepository&gt;();
</code></pre><h3 id="3-Implement-the-repository"><a href="#3-Implement-the-repository" class="headerlink" title="3. Implement the repository"></a>3. Implement the repository</h3><p>Because the DDS in EPiServer can be a little slow we use<br><a href="https://github.com/jonwagner/Insight.Database" target="_blank" rel="external">Insight.Database</a> for super fast database access / query execution.<br>More important is it also allows you to execute sql queries async with ease. We like to have this because<br>we are going to update the table during each request, but don’t want to wait for it, see the UpdateXCriterion function for an example.<br>The XCriterionModel.Data property contains JSON, so you can save basically anything you want.</p>
<pre><code>public class XCriterionRepository : BaseRepository, IXCriterionRepository
{
    public XCriterionModel GetXCriterion(Guid userId, string key)
    {
        XCriterionModel result = null;
        var results = Connection.QuerySql&lt;XCriterionModel&gt;(
            &quot;SELECT * FROM XCriterionModel WHERE AnonymousUserId = @AnonymousUserId AND SessionKey = @SessionKey&quot;,
            new { AnonymousUserId = userId, SessionKey = key });

        if (!results.Any())
        {
            var newObj = new XCriterionModel()
                {
                    AnonymousUserId = userId,
                    SessionKey = key,
                    Data = string.Empty,
                    Modified = DateTime.Now
                };

            try
            {

                Connection.ExecuteSql(
                    &quot;INSERT INTO XCriterionModel SELECT AnonymousUserId, SessionKey, Data, Modified FROM @Criterion&quot;,
                    new {Criterion = new List&lt;XCriterionModel&gt; {newObj}});
                result = newObj;
            }
            catch (Exception ex)
            {
                Log.Error(ex);
                throw ex;
            }
        }
        else
        {
            result = results.FirstOrDefault();
        }

        return result;
    }

    public void UpdateXCriterion(XCriterionModel criterion)
    {
        Connection.ExecuteSqlAsync(&quot;UPDATE XCriterionModel SET Data = @Data, Modified = @Modified WHERE AnonymousUserId = @AnonymousUserId AND SessionKey = @SessionKey&quot;, criterion);
    }

    public void Clean(int expirationDays)
    {

        Connection.ExecuteSql(
            &quot;DELETE FROM XCriterionModel WHERE Modified &lt; DATEADD(DAY, DATEDIFF(DAY, 0, GETDATE()), @NumberOfDays)&quot;,
            new {NumberOfDays = 0 - expirationDays});
    }
}
</code></pre><h3 id="4-Ensure-the-database"><a href="#4-Ensure-the-database" class="headerlink" title="4. Ensure the database"></a>4. Ensure the database</h3><p>Make sure the database is setup correctly. The EnsureDatabase function is executed during initiaizing the repository and is required<br>by the base repository we are using.</p>
<pre><code>public override void EnsureDatabase()
{
    Connection.ExecuteSql(
        &quot;IF NOT exists(SELECT 1 FROM sys.Tables WHERE Name = N&apos;XCriterionModel&apos; AND Type = N&apos;U&apos;)&quot; +
        &quot;BEGIN&quot; +
        &quot;   CREATE TYPE XCriterionModelTable AS TABLE (AnonymousUserId [uniqueidentifier], SessionKey [nvarchar](50), Data [nvarchar](max), Modified [date]); &quot; +
        &quot;   CREATE TABLE XCriterionModel (&quot; +
        &quot;    AnonymousUserId uniqueidentifier,&quot; +
        &quot;    SessionKey nvarchar(50),&quot; +
        &quot;    Data nvarchar(max),&quot; +
        &quot;    Modified date&quot; +
        &quot;    primary key (AnonymousUserId, SessionKey)&quot; +
        &quot;  );&quot; +
        &quot;END&quot;);
}
</code></pre><h2 id="The-final-implementation"><a href="#The-final-implementation" class="headerlink" title="The final implementation"></a>The final implementation</h2><p>Finally you can implement your custom visitor group criterion. This criterion is using the IXCriterionRepository to save the data to<br>where ever you want and relies on the XCriterionBase class to identify the user. In the example code I show you an example of the cross session<br>implementation we made for the ViewedPages criterion.</p>
<h3 id="1-The-sessionkey"><a href="#1-The-sessionkey" class="headerlink" title="1. The sessionkey"></a>1. The sessionkey</h3><p>Each implementation needs a unique sessionkey. Together with the AnonymousUserId this makes unique combination in the database.</p>
<pre><code>protected override string SessionKey
{
    get
    {
        return &quot;EPi:ViewedPagesX&quot;;
    }
}
</code></pre><h3 id="2-Add-viewed-pages"><a href="#2-Add-viewed-pages" class="headerlink" title="2. Add viewed pages"></a>2. Add viewed pages</h3><p>Register the events to handle the start of each session. We initialize the VisitedPage event.<br>Each time a page is visited this event occurs and we add the viewedpage to a hashset in the session<br>and notice the repository to update the database with the new situation as well.</p>
<pre><code>public override void Subscribe(ICriterionEvents criterionEvents)
{
    base.Subscribe(criterionEvents);
    criterionEvents.VisitedPage += VisitedPage;
}

private void VisitedPage(object sender, CriterionEventArgs e)
{
    var pageLink = e.GetPageLink();
    if (PageReference.IsNullOrEmpty(pageLink))
        return;

    AddViewedPage(e.HttpContext, pageLink);
}

private void AddViewedPage(HttpContextBase httpContext, PageReference pageLink)
{
    var hashSet = GetViewedPages(httpContext);
    if (hashSet == null)
    {
        hashSet = new HashSet&lt;PageReference&gt;();
        if (httpContext.Session != null)
            httpContext.Session[SessionKey] = hashSet;
    }

    if (!hashSet.Contains(pageLink))
        hashSet.Add(pageLink); //add to current set when not exists

    //always make sure you update the database.
    Repository.UpdateXCriterion(
        new XCriterionModel() {
            AnonymousUserId = AnonymousUserId,
            SessionKey = SessionKey,
            Data = JsonConvert.SerializeObject(hashSet), //save as json
            Modified = DateTime.Now
        });
}
</code></pre><h3 id="3-Get-previously-viewed-pages"><a href="#3-Get-previously-viewed-pages" class="headerlink" title="3. Get previously viewed pages"></a>3. Get previously viewed pages</h3><p>To be sure we don’t need the database for every request we get all viewed pages from the repository during the first request<br>and put everything into the session. After this the implementation works more or less the same as you are used to with the standard<br>ViewedPages criterion, with the exception that we update the database after every request for cross session purpose (see previous paragraph).</p>
<pre><code>private HashSet&lt;PageReference&gt; GetViewedPages(HttpContextBase httpContext)
{
    if (httpContext.Session == null)
        return null;

    var hashSet = httpContext.Session[SessionKey] as HashSet&lt;PageReference&gt;;
    if (hashSet == null)
    {
        var criterion = Repository.GetXCriterion(AnonymousUserId, SessionKey);

        if (criterion.Data.ValidateJSON())
        {
            hashSet = JsonConvert.DeserializeObject&lt;HashSet&lt;PageReference&gt;&gt;(criterion.Data);
            httpContext.Session[SessionKey] = hashSet;
        }
    }

    return hashSet;
}
</code></pre><h3 id="4-Unsubscribe"><a href="#4-Unsubscribe" class="headerlink" title="4. Unsubscribe"></a>4. Unsubscribe</h3><p>And finally do’nt forget to unsubscribe.</p>
<pre><code>public override void Unsubscribe(ICriterionEvents criterionEvents)
{
    base.Unsubscribe(criterionEvents);
    criterionEvents.VisitedPage -= VisitedPage;
}
</code></pre><h3 id="5-Clean-up-entities"><a href="#5-Clean-up-entities" class="headerlink" title="5. Clean up entities"></a>5. Clean up entities</h3><p>Because you have a cookie expiration users can get new AnonymousUserIds from time to time. It’s also likely you like to cleanup<br>database entities for several other reasons. Don’t forget to create an EpiServer job which can execute the repository’s cleanup<br>function from time to time. The function removes every entity not modified since a particular date. Ofcourse there are also many reasons<br>you want to keep the data for big data analysis, but that’s up to you.</p>
<pre><code>Repository.Clean(90) //when you like to delete everything that&apos;s not modified for 90 days.
</code></pre><h2 id="Finally"><a href="#Finally" class="headerlink" title="Finally"></a>Finally</h2><p>Again EpiServer has the right tools to extend the system in a way you like. This article hopefully helps you out by creating<br>your own cross session visitor group criterion. I also put together <a href="https://gist.github.com/Chuhukon/7a076f7f4b049f23957d" target="_blank" rel="external">all code in one big gist</a>. Feel free to<br>use it the way you want and create some beautiful customer experiences.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;With the standard visitor group criteria cross session personalisation is not standard.&lt;br&gt;However when a user already has visited your w
    
    </summary>
    
    
      <category term="Episerver" scheme="http://ismarvelous.nl/tags/Episerver/"/>
    
  </entry>
  
  <entry>
    <title>Continuous Integration using Appveyor with the EPiServer Digital Experience Cloud</title>
    <link href="http://ismarvelous.nl/posts/episerver%20continous%20integration%20using%20appveyor/"/>
    <id>http://ismarvelous.nl/posts/episerver continous integration using appveyor/</id>
    <published>2015-09-26T22:00:00.000Z</published>
    <updated>2016-08-14T11:31:22.521Z</updated>
    
    <content type="html"><![CDATA[<p><em>note: add some small changes on 17-11-2015 based on some new insights on the latest version of DXC.</em>  </p>
<p>Did you already hear about Appveyor? If the answer is no, check out for example the post <a href="http://www.hanselman.com/blog/AppVeyorAGoodContinuousIntegrationSystemIsAJoyToBehold.aspx" target="_blank" rel="external">A good continuous integration system is a joy to behold</a> by Scott Hanselman.</p>
<p>So now you do know how cool it is, let’s start using it for your EPiServer project. The EPiServer Digital Experience Cloud is running on Azure, so everything you read here does work for your Azure setup as well.</p>
<h2 id="Attaching-your-source…"><a href="#Attaching-your-source…" class="headerlink" title="Attaching your source…"></a>Attaching your source…</h2><p>Attaching your source to Appveyor is really easy.  </p>
<ul>
<li>Go to your Appveyor portal page</li>
<li>Select New project</li>
<li>Select the source control system you use.<ul>
<li>We use Visual Studio Online</li>
<li>You see all vs online instances you have access to</li>
<li>Select the branch folder you like to have CI for.</li>
</ul>
</li>
<li>A Appveyor project is created for you, that’s all!</li>
<li>Now you are in the settings area of Appveyor. All items you can set here, can be downloaded / saved as a yaml file (<em>Export YAML</em>)</li>
</ul>
<h2 id="Create-the-yaml-file"><a href="#Create-the-yaml-file" class="headerlink" title="Create the yaml file"></a>Create the yaml file</h2><p>The beauty of Appveyor is that most things are working out-of-the box, without too much setup. For example you can setup the CI environment by using an easy to read Yaml file, or just create the Yaml file automatically within Appveyor.<br>If the Yaml file is not in your project, the build server relies on the settings you did in the “admin” portal. Exporting the default configuration to a Yaml file is very easy. Go to your project settings page and hit the “Export Yaml” menu item en create the Yaml file from there.<br>Add the file to the root of your code repository. Our Yaml file looks like this:</p>
<pre><code>version: 0.1.{build}
configuration: Release
assembly_info:
  patch: true
  file: &apos;**\AssemblyInfo.*&apos;
  assembly_version: &apos;{version}&apos;
  assembly_file_version: &apos;{version}&apos;
  assembly_informational_version: &apos;{version}&apos;
nuget:
  account_feed: true
  project_feed: true
  disable_publish_on_pr: true
before_build:
- nuget restore website\solutionname.sln -source http://nuget.episerver.com/feed/packages.svc/ -source https://www.nuget.org/api/v2/
build:
  publish_wap_xcopy: true
  verbosity: minimal
deploy:
- provider: WebDeploy
  server: https://--- website name ---.scm.azurewebsites.net:443/msdeploy.axd?site=--- website name ---
  website: --- website name ---
  username: --- username ---
  password:
    secure: --- your secure key here ---
</code></pre><p>Every setting in this Yaml file can be managed from the Appveyor portal as well. But in the end I think it’s easy to have this file<br>versioned in your project. Let’s describe our setup.</p>
<h3 id="Versioning"><a href="#Versioning" class="headerlink" title="Versioning"></a>Versioning</h3><p>Versioning can be handled by the Appveyor build server. It automatically sets the version numbers of your projects. In our example that’s<br>a prefixed version number (0.1.) combined with the buildnumber ({build}).</p>
<h3 id="Episerver-nuget-settings"><a href="#Episerver-nuget-settings" class="headerlink" title="Episerver nuget settings"></a>Episerver nuget settings</h3><p>Appveyor does restore nuget packages automatically, but when using EpiServer we rely heavily on EPiServers nuget package feed.<br>Therefor you can execute a pre-build command (see: _before_build_) and add the sources you rely on there. Appveyor can also serve<br>as your own private nuget server. If you build nuget packages in your solution these are automatically added to the private nuget feed (based on the .nuspec files).</p>
<h3 id="Web-deploy"><a href="#Web-deploy" class="headerlink" title="Web deploy"></a>Web deploy</h3><p>After each commit (or tfs check-in) we like to deploy our stuff to our dev test environment of course. This again is really easy to setup.<br>See the <em>deploy</em> part of the YAML file, or go to the <em>deployment</em> settings area in Appveyor. You need to download your publish profile from the Azure portal<br>or in case you use the EPiserver Digital Cloud Experience platform, you can get this from your support engineer.  </p>
<p>The file is an xml file. All data needed to setup Appveyor correctly for Web deploy is in this file:  </p>
<ul>
<li><strong>Server</strong>: https:// + &lt; publishProfile publishUrl > + msdeploy.axd?site= + \&lt; publishProfile msdeploySite >  </li>
<li><strong>Website name</strong>:  &lt; publishProfile msdeploySite >  </li>
<li><strong>Username</strong>: &lt; publishProfile userName >  </li>
<li><strong>Password</strong>: &lt; publishProfile userPWD >  </li>
</ul>
<h3 id="Build-a-zip-package-and-deploy"><a href="#Build-a-zip-package-and-deploy" class="headerlink" title="Build a zip package and deploy."></a>Build a zip package and deploy.</h3><p>I don’t like to do CI for our live environment. And because we like to test the “GO Live procedure” we don’t do this for our<br>acceptance environment either. We like to have a person who push the red button. When using DXC the EPiServer support team will push this button. Appveyor to the rescue; it can create a zip package for<br>xcopy deployments and save it as an artifact (_publish_wap_xcopy: true_ or go the the <em>Build</em> tab and set <em>Package Web Applications for XCopy deployment</em>).<br>If you think a specific version is stable enough, just download the zip file and send it together to the administrator who has to deploy the package.<br>Appveyor can also do the deployments for you, but when your administrator don’t have access to you Appveyor portal WAWSDeploy can help you out.</p>
<p>For the administrator (and also for the developer) WAWSDeploy is an easy to use tool to help you with the deployment of the zip file.<br>You can install WAWSDeploy via <a href="https://chocolatey.org/packages/WAWSDeploy" target="_blank" rel="external">Chocolatey</a> and read more about it at <a href="http://blog.davidebbo.com/2014/03/WAWSDeploy.html" target="_blank" rel="external">David Ebbo’s blogpost</a>.<br>This is especially handy when you own the environment, in case of the DXC a lot is handled for you by the support team.</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Appveyor works really great within an EPiServer DTAP street. This is mainly because the great code first approuch and the ease of use of Appveyor. The Digital Cloud Experience Platform<br>makes it even more easier, because we don’t have to do transformations for services busses, connectionstrings etc and even the deployment to staging and prod. The EPiServer support team will manage this for you.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;note: add some small changes on 17-11-2015 based on some new insights on the latest version of DXC.&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;Did you already hea
    
    </summary>
    
    
      <category term="Episerver" scheme="http://ismarvelous.nl/tags/Episerver/"/>
    
      <category term="Azure" scheme="http://ismarvelous.nl/tags/Azure/"/>
    
      <category term="Appveyor" scheme="http://ismarvelous.nl/tags/Appveyor/"/>
    
  </entry>
  
  <entry>
    <title>Upload files with Xforms</title>
    <link href="http://ismarvelous.nl/posts/upload%20files%20with%20xforms/"/>
    <id>http://ismarvelous.nl/posts/upload files with xforms/</id>
    <published>2015-08-12T22:00:00.000Z</published>
    <updated>2016-08-14T11:30:35.604Z</updated>
    
    <content type="html"><![CDATA[<p>No this post is not about my hate love relationship with xforms. We all know the drill you always need something that’s<br>not possible out of the box. I call that a challenge. The latest one was, “Can I add a file upload field”. Yes of course you can. In this post I explain how I did this.</p>
<p>The first step is to create an xform with an input element and set the cssClass to “upload”.</p>
<p>If you already did some customization on your xform you are already familier to have a file named “inputelement.cshtml” in your “~/views/shared/xformelements” folder. If you don’t, just create that directory and<br>add that file “inputfragment.cshtml” to it. You can find the original one in the folder “\Util\Views\Shared\EditorTemplates\” which is part of the the “EPiServer.CMS.Shell.UI.zip”.</p>
<p>Customize this file and add an file box to it, see an example below</p>
<pre><code>@model EPiServer.XForms.Parsing.InputFragment 
&lt;label for=&quot;@Model.Reference&quot;&gt;@Model.Label&lt;/label&gt;
@if (!string.IsNullOrWhiteSpace(Model.Class) &amp;&amp; Model.Class.ToLower() == &quot;upload&quot;)
{
    @*This is where the magic happens*@
    &lt;input type=&quot;file&quot; name=&quot;@Model.Reference&quot; /&gt;
}
else
{
    @Html.TextBox(Model.Reference, Server.HtmlDecode(Model.Value) ?? string.Empty, new { size = Model.Size, placeholder = Model.Title })
}
@Html.ValidationMessage(Model.ValidationReference) // EPiServer 7.5 and upwards
</code></pre><p>As you can see the magic is done by adding a class on the element in your xforms designer. When the class is named “upload” the field is rendered as a file box. Easy as that.  </p>
<p>Now you have rendered an upload field. You need to process the files as well.<br>Assuming you handle the success action of the xform like so:</p>
<pre><code>@Html.PropertyXForm(&quot;Form&quot;, new XFormParameters() { SuccessAction = &quot;Success&quot;, PostAction = &quot;DoSubmit&quot; })
</code></pre><p>Add the next action to your controller:</p>
<pre><code>[AcceptVerbs(HttpVerbs.Post)]
public virtual ActionResult Success(BasePageData currentPage, XFormPostedData xFormpostedData)
{
    //do all kind of other custom stuff..

    #region get files

    //process all files
    if (Request.Files.Count &gt; 0)
    {
        var file = Request.Files[0];

        if (file != null &amp;&amp; file.ContentLength &gt; 0)
        {
            //save file to a predefined path for example ~/app_data/
            var fileName = Path.GetFileName(file.FileName);
            if (fileName != null)
            {
                var path = Path.Combine(Server.MapPath(&quot;~/App_data/&quot;), fileName);
                file.SaveAs(path);
            } //or use blobstorage: http://world.episerver.com/blogs/Johan-Bjornfot/Dates1/2013/12/Working-with-Media-programmatically/
        }
    }

    #endregion

    //do your other stuff which handles your action correctly, I always use 
    // the next snippet, since we return our own viewmodel..

    //Return to the right page..
    if(xFormpostedData.XForm.PageGuidAfterPost != Guid.Empty)
    {
        return Redirect(UrlResolver.GetUrl(ContentRepository.Get&lt;PageData&gt;(xFormpostedData.XForm.PageGuidAfterPost).ContentLink));
    }

    //default, return to default view and create the viewmodel.
    return View(CreateViewModel(currentPage));
}
</code></pre><p>That’s pretty much it.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;No this post is not about my hate love relationship with xforms. We all know the drill you always need something that’s&lt;br&gt;not possible o
    
    </summary>
    
    
      <category term="Episerver" scheme="http://ismarvelous.nl/tags/Episerver/"/>
    
  </entry>
  
  <entry>
    <title>Typed models generator for Umbraco document types</title>
    <link href="http://ismarvelous.nl/posts/typed%20models%20generator%20for%20umbraco%20document%20types/"/>
    <id>http://ismarvelous.nl/posts/typed models generator for umbraco document types/</id>
    <published>2015-06-08T22:00:00.000Z</published>
    <updated>2016-08-08T18:28:24.163Z</updated>
    
    <content type="html"><![CDATA[<p>The latest build of <a href="http://bitbucket.org/ismarvelous/muffin" target="_blank" rel="external">muffin</a> has support for automatic typed model generation using T4 templates. I let you see how; in this youtube video.</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/TZjBbqMyWes" frameborder="0" allowfullscreen></iframe></div>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The latest build of &lt;a href=&quot;http://bitbucket.org/ismarvelous/muffin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;muffin&lt;/a&gt; has support for automatic
    
    </summary>
    
    
      <category term="Umbraco" scheme="http://ismarvelous.nl/tags/Umbraco/"/>
    
      <category term="Muffin" scheme="http://ismarvelous.nl/tags/Muffin/"/>
    
  </entry>
  
  <entry>
    <title>The Umbraco Foundation - A dynamic journey of concerns</title>
    <link href="http://ismarvelous.nl/posts/the%20Umbraco%20Foundation%20-%20a%20dynamic%20journey%20of%20concerns/"/>
    <id>http://ismarvelous.nl/posts/the Umbraco Foundation - a dynamic journey of concerns/</id>
    <published>2014-03-24T23:00:00.000Z</published>
    <updated>2016-08-08T18:42:44.932Z</updated>
    
    <content type="html"><![CDATA[<blockquote>The Macaw.Umbraco.Foundation is deprecated and I’am not involved in the development of this anymore. However we continue working on <a href="https://github.com/ismarvelous/muffin" target="_blank" rel="external">Muffin</a> which is based on the same principles.</blockquote>

<p>This post is a recap of a presentation I gave at the BUUG (The Belgium Umbraco User group) The  presentation is available on <a href="http://www.slideshare.net/JeroenWijdeven/a-dynamic-journey-of-concerns" target="_blank" rel="external">Slideshare</a>.  </p>
<h3 id="Why-did-I-start-developing-the-foundation"><a href="#Why-did-I-start-developing-the-foundation" class="headerlink" title="Why did I start developing the foundation?"></a>Why did I start developing the foundation?</h3><p>Two of my main concerns when I dived a little deeper into the Umbraco system are:  </p>
<ul>
<li>The flexibility of Umbraco has it’s price. XSLT, Webforms, MVC where to start and what to use? I have seen solutions where all these techniques are used together. Resulting in a non-maintainable solution at the end.  </li>
<li>I don’t like code ….. In VIEWS! How can we keep them front-end / non-Umbraco developer friendly?  </li>
</ul>
<p>For example the next line of code is very Umbraco specific:      </p>
<p><img src="/assets/posts/20140325-1.png" alt="GetPropertyValue in Umbraco"></p>
<p>And the next piece of code looks more like a ViewModel declaration than actual view specific code.     </p>
<p><img src="/assets/posts/20140325-2.png" alt="object declarations in the view] in Umbraco"></p>
<p>Let’s separate the concerns</p>
<ul>
<li>Models are for business</li>
<li>Controllers are for interaction, and creating views</li>
<li>Views are templates where content and design come together</li>
</ul>
<p>A great practice is “Single responsibility” or sometimes also called “Single point of failure”. Umbraco has some great solutions for that. IPropertyValueConverters for example prevent you to write a bunch of code everytime you try to convert your ContentPicker property to an IPublishedContent object. The property converter is called every time GetPropertyValue is exececuted. We have implement 4 converters in our foundation, which in our foundation also work for Macro properties (parameters).  </p>
<ul>
<li>ContentPicker returns an IPublishedContent, which usually returns an integer.  </li>
<li>MediaPicker returns an url or a nice looking default image, which usually returns an integer aswell.  </li>
<li>RelatedLinks returns a list of UrlModel objects, which usually returns some json (since v7).  </li>
<li>MacroContainer returns a list of DynamicMacroModelHtmlProxies. This is a proxy for the DynamicMacroModel class and extend it with IHtmlString functionality. The DynamicMacroModel is a dynamic representation of a Macro object where the parameters are the properties. The IHtmlString functionality is the Umbraco tag for rendering the macro &lt;?UMBRACO_MACRO .. /&gt;. Usually a MacroContainer property results in a HtmlString where all macros are merged together in one div container. Which a front-end developer don’t like because of the extra html and the Umbraco developer don’t like, because he doesn’t have any flexibility to manipulate the list. What about a Macro that looks like this?: </li>
</ul>
<p><img src="/assets/posts/20140325-3.png" alt="Separate the concerns"></p>
<h3 id="Simplefied-views"><a href="#Simplefied-views" class="headerlink" title="Simplefied views"></a>Simplefied views</h3><p>The PropertyValueConvertes results in converted objects where you don’t have to convert those properties every time in your view. But simplified views mean a little more. And with a little I mean views with as less system dependency (like GetPropertyValue etc) as possible. In the end this can result in something like this:  </p>
<p><img src="/assets/posts/20140325-4.png" alt="Simplefied views"></p>
<p>But where is the “GetPropertyValue” called in the Simplefied views example?</p>
<p>Suprise! That’s all <a href="http://msdn.microsoft.com/en-us/library/dd264736.aspx" target="_blank" rel="external">about dynamics</a>. By introducing a Dynamic”View”Model every TryGetMember call can excecute the GetPropertyValue. The best of it all; Umbraco has already done this with their DynamicPublishedContent. In our foundation we just write a proxy for the DynamicPublishedContent that add some extras like: a “Homepage” property and “Breadcrumbs”. This proxy is acting as our ViewModel.</p>
<p><img src="/assets/posts/20140325-5.png" alt="The proxy"></p>
<h3 id="The-foundation"><a href="#The-foundation" class="headerlink" title="The foundation"></a>The foundation</h3><p>The foundation mainly focussed on the concern of “clean” views. However the foundation is a lot more. Other important goals are:  </p>
<ul>
<li>Standarisation. By giving a set of best practices and implementation which can be used in other Umbraco projects as well.  </li>
<li>Single responsibility. No (or as less as possible) duplicated code or implementations. This is mainly reached by doing separation of concerns right.  </li>
<li>Improve overall quality. More testable code, single points of failure, caching etc..  </li>
<li>Reducing development time. Don’t reinvent the wheel everytime. Standard blocks of implementation can help a lot.  </li>
</ul>
<p>Some features we haven’t talked about in this article are:  </p>
<ul>
<li>Paged list controllers  </li>
<li>Json converters; Convert an IPubhlishedContent into a Json string.  </li>
<li>Default full-text search implementation with Examine  </li>
<li>IPublishedContent type mappers; Map an IPublishedContent to a typed ViewModel.  </li>
<li>Translation helpers; Use default translation when item is not in dictionary  </li>
<li>Standard Sitemap implementation  </li>
</ul>
<p>If you like to try it yourself go to: <a href="http://github.com/MacawNL/Macaw.Umbraco.Foundation" target="_blank" rel="external">GitHub</a> . The example project contains examples for every feature.</p>
<p>UPDATE 01-07-2015: Muffin (a fork of the foundation) is much more mature: <a href="https://github.com/ismarvelous/muffin" target="_blank" rel="external">Muffin</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;The Macaw.Umbraco.Foundation is deprecated and I’am not involved in the development of this anymore. However we continue working
    
    </summary>
    
    
      <category term="Umbraco" scheme="http://ismarvelous.nl/tags/Umbraco/"/>
    
      <category term="Muffin" scheme="http://ismarvelous.nl/tags/Muffin/"/>
    
      <category term="Practices" scheme="http://ismarvelous.nl/tags/Practices/"/>
    
  </entry>
  
  <entry>
    <title>Episerver 7 Exam Preparation</title>
    <link href="http://ismarvelous.nl/posts/episerver%207%20exam%20preparation/"/>
    <id>http://ismarvelous.nl/posts/episerver 7 exam preparation/</id>
    <published>2014-03-04T23:00:00.000Z</published>
    <updated>2016-08-14T11:31:22.564Z</updated>
    
    <content type="html"><![CDATA[<p>Today I passed the EPiServer 7 exam. If you think the information EPiServer gives about the exam is a little overwhelming.. I can say you are not alone. Because of this, the pitfall is; you know / learn about too many things too little or about too little things too much. Hopefully this post can help you to put you in the right direction and not give you too much information about too much things ;-) ..</p>
<p>The exam is split into 5 knowledge areas: Content model, Creating websites, Product knowledge, advanced concepts, Installation &amp; Configuation. 10 to 15 questions per area.</p>
<p>If you focus on the next pieces of information / documentation the chances are high you pass:</p>
<ul>
<li><a href="http://world.episerver.com/en/Documentation/CMS/?id=66787&amp;epslanguage=en&amp;version=7.5" target="_blank" rel="external">Documentation</a></li>
<li>Editors manual</li>
<li>Admin manual</li>
<li><a href="https://leanpub.com/episerver-7-cms-development" target="_blank" rel="external">The EpiServer book by Joel Abrahamsson</a> (In my opinion Chapter 8 is the most important one)</li>
</ul>
<p>It is wise to understand everything that is used in the Alloy website and with everything I mean everything from top till bottom, every; class, interface, attribute, config setting and concept. If you don’t understand a little piece search for it on the internet, there is plenty of information about every class and concept on the internet and in the SDK.</p>
<h2 id="Tips-per-knowledge-area"><a href="#Tips-per-knowledge-area" class="headerlink" title="Tips per knowledge area:"></a>Tips per knowledge area:</h2><p>The knowledge areas are also described on <a href="http://www.episerver.com/Training/EPiServer-Certification/EPiServer-7-CMS/Knowledge-areas/" target="_blank" rel="external">the EPiServer website</a>. But where to start? I think per area it’s enough to focus on the next tips, together with the tips and documentation a talked about above, and it’s likely you pass the exam.</p>
<h2 id="Content-Model"><a href="#Content-Model" class="headerlink" title="Content Model"></a>Content Model</h2><ul>
<li>Great post: <a href="http://joelabrahamsson.com/episerver-7-content-pages-and-blocks/" target="_blank" rel="external">EpiServer 7 Content pages and blocks</a></li>
<li>Another great post: <a href="http://world.episerver.com/Blogs/Johan-Bjornfot/Dates1/2012/9/EPiServer-7--Rendering-of-content/" target="_blank" rel="external">EPiServer 7 Rendering of contents</a></li>
</ul>
<p>Creating websites</p>
<ul>
<li>Understand the Alloy website top till bottom</li>
<li>A lot of things are also explained in the book by Joel Abrahamsson</li>
<li>If you have a lot of EPiServer experience there is nothing to worry about here.</li>
<li><a href="http://joelabrahamsson.com/how-episervers-html-helper-propertyfor-works/" target="_blank" rel="external">How EpiServer Html helper propertyfor works</a></li>
</ul>
<p>Product knowledge</p>
<ul>
<li>Read the editors and admin manual</li>
<li>Click through the episerver interface (dashboard, editor and admin sections)</li>
</ul>
<p>Advanced concepts</p>
<ul>
<li>Just focus on the basics and the concepts only; plugins, scheduled jobs and modules.</li>
<li>Don’t go into detail about how to develop these things exactly; knowledge about the concepts and base classes is enough.</li>
<li><a href="http://tedgustaf.com/blog/2008/8/create-a-scheduled-job-in-episerver/" target="_blank" rel="external">Create a scheduled job in EPiServer</a></li>
<li><a href="http://world.episerver.com/Blogs/Paul-Smith/Dates1/2011/8/Creating-EPiServer-AdminEdit-Plug-ins-using-MVC/" target="_blank" rel="external">Creating EPiServer Admin edit plugins using MVC</a></li>
</ul>
<p>Installation &amp; Configuation</p>
<ul>
<li>Most important read the admin manual and understand the Admin section of the EpiServer interface.</li>
<li>Understand the concept of the Add-on store; how you can install add-ons and where they are stored / installed.</li>
<li>Use the deployment center once or twice yourself.</li>
</ul>
<p>Good luck!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today I passed the EPiServer 7 exam. If you think the information EPiServer gives about the exam is a little overwhelming.. I can say you
    
    </summary>
    
    
      <category term="Episerver" scheme="http://ismarvelous.nl/tags/Episerver/"/>
    
  </entry>
  
</feed>
